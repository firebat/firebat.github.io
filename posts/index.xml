<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on firebat</title><link>https://firebat.github.io/posts/</link><description>Recent content in Posts on firebat</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Fri, 28 Feb 2025 04:04:38 -0400</lastBuildDate><atom:link href="https://firebat.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>浅析Voip原理</title><link>https://firebat.github.io/posts/voip/</link><pubDate>Fri, 28 Feb 2025 04:04:38 -0400</pubDate><guid>https://firebat.github.io/posts/voip/</guid><description>&lt;p>&lt;img src="./images/webrtc-comprehensive.png" alt="WebRTC">
P2P技术的发展，产生了各种网络共享下载的应用，如Napster、Gnutella；音视频编码算法的进步、硬件性能的提升以及移动互联网的发展，在我们身边诞生出形形色色的网络应用，如网络电话、网络会议、网络直播等，同时也带来了各种商业上的成功。&lt;/p>
&lt;ul>
&lt;li>Skype 2003年诞生的一款即时通信应用软件，可通过互联网进行语音和视频通话，2011年微软85亿美元收购。&lt;/li>
&lt;li>FaceTime 2010年苹果公司的一种视频通话应用软件，采用多种开放协议，ACC与H.264的音视频编码。&lt;/li>
&lt;li>WebRTC 2011年Google发起的开源实时通讯解决方案，支持浏览器集成。&lt;/li>
&lt;/ul>
&lt;p>作为互联网从业的研发人员，我们有必要了解一下，这一切是怎么发生的，其内部是如何实现的。&lt;/p>
&lt;h1 id="网络">网络&lt;/h1>
&lt;p>因为互联网的快速发展，联网设备数量远超设计者的最初设想，整个IPv4的地址范围不够用，因此引入了NAT技术。NAT（Net Address Translate）网络地址转换，简单来说就是在路由层记录私有网络和公有网络的IP映射关系，并进行IP数据包的修改，实现了公网IP复用的技术。
&lt;img src="./images/NAT_Concept-en.svg" alt="NAT">&lt;/p>
&lt;p>根据路由器对私网IP端口到公网IP端口的映射方式，RFC3489中将NAT分为四种类型&lt;/p>
&lt;ul>
&lt;li>Full Cone NAT（全锥型），同一内部IP端口发出的请求，被映射到相同的外部IP端口；任何外部主机通过向映射的地址发送报文，实现与内部主机通信。&lt;/li>
&lt;li>Restricted Cone NAT（受限锥型），发出同上；当且仅当内部主机之前向公网主机发送过报文，公网主机才能与其通信。&lt;/li>
&lt;li>Port Restricted Cone NAT（端口受限锥型）发出同上；限制条件包括端口。&lt;/li>
&lt;li>Symmetric NAT（对称型）所有内部IP端口向特定目的IP端口发出的请求，都被映射成同一个IP和端口。只有接收到数据的公网主机才能反向与内部主机通信。
&lt;img src="./images/nat-type.png" alt="NAT类型">&lt;/li>
&lt;/ul>
&lt;h1 id="类型检测">类型检测&lt;/h1>
&lt;p>要检测当前主机所在的NAT类型，需要在云端部署一个服务，包含两个IP和端口
&lt;img src="./images/detect-no-nat.jpg" alt="无NAT">&lt;/p>
&lt;ul>
&lt;li>客户端向服务器发送请求，服务器将观察到的地址响应给客户端&lt;/li>
&lt;li>如果响应中的地址与发送地址一致，说明客户端在公网，没有NAT。
&lt;img src="./images/detect-cone-sym.jpg" alt="对称性">&lt;/li>
&lt;li>客户端向服务端第二个IP地址再发送一个请求&lt;/li>
&lt;li>如果两次响应中的公网地址不一致，说明是对称型
&lt;img src="./images/detect-cone-full.jpg" alt="全锥型">&lt;/li>
&lt;li>客户端向服务器第一个IP地址发送请求，服务端用另一个IP地址返回&lt;/li>
&lt;li>如果可以收到，说明是全锥型
&lt;img src="./images/detect-cone-restricted.jpg" alt="受限锥型">&lt;/li>
&lt;li>客户端向服务器再发送一个请求，服务器用同一IP的第二个端口响应&lt;/li>
&lt;li>如果可以收到，说明是受限锥型；否则为端口受限锥型。&lt;/li>
&lt;/ul>
&lt;h1 id="nat穿透">NAT穿透&lt;/h1>
&lt;p>NAT技术解决了IPv4不够用的问题，同时也导致TCP/IP通信困难，外部主机无法主动与内部主机通信，所有服务不得不采用C/S架构，导致高额的带宽成本。为了节约网络带宽成本，将客户端也作为资源提供方减少对服务的访问，因此产生了P2P技术。即Peer-to-Peer，点对点技术，其中最关键的技术之一，就是NAT设备穿透，俗称打洞。&lt;/p>
&lt;h2 id="反向链接">反向链接&lt;/h2>
&lt;p>通信双方只有一个节点位于NAT中
&lt;img src="./images/nat-reversal-connection.jpg" alt="">&lt;/p>
&lt;ul>
&lt;li>A请求B时，可以直接发起&lt;/li>
&lt;li>B请求A时，通过S转发给A一个连接请求，A再发起请求&lt;/li>
&lt;/ul>
&lt;h2 id="简单场景">简单场景&lt;/h2>
&lt;p>双方位于同一个NAT设备之后
&lt;img src="./images/hole-punch-simple.jpg" alt="">&lt;/p>
&lt;ul>
&lt;li>A与B分别与S建立连接，S记录下双方的内网信息，以及自己观察到的公网信息；&lt;/li>
&lt;li>A向S发起连接B的请求；S分别向双方发送对方的公网和内网地址；&lt;/li>
&lt;li>A和B收到信息后，同时向对方发起连接；推荐优先使用内网地址，直接通过交换机通信，速度快。也可以使用公网地址，需要网关支持Hairpin技术。&lt;/li>
&lt;/ul>
&lt;h2 id="普遍场景">普遍场景&lt;/h2>
&lt;p>双方位于不同的NAT设备之后
&lt;img src="./images/hole-punch-normal.jpg" alt="">&lt;/p>
&lt;ul>
&lt;li>A与B分别与S建立连接，S记录下双方的内网信息，以及自己观察到的公网信息；&lt;/li>
&lt;li>A向S发起连接B的请求；S分别向双方发送对方的公网和内网地址；&lt;/li>
&lt;li>A和B的同时使用对方的公网地址发送数据包&lt;/li>
&lt;/ul>
&lt;h3 id="双方为锥型">双方为锥型&lt;/h3>
&lt;p>&lt;img src="./images/punch-cone.png" alt="">&lt;/p>
&lt;ul>
&lt;li>A向B发送打洞包建立映射&lt;/li>
&lt;li>B向A发送打洞包建立映射&lt;/li>
&lt;li>打洞成功&lt;/li>
&lt;/ul>
&lt;h3 id="对称型和普通锥形全锥型受限锥型">对称型和普通锥形（全锥型、受限锥型）&lt;/h3>
&lt;p>&lt;img src="./images/punch-normal.png" alt="">&lt;/p>
&lt;ul>
&lt;li>A使用PA2向B发送打洞包，建立映射&lt;/li>
&lt;li>B使用PB1向PA1发送打洞包，建立映射&lt;/li>
&lt;li>B通过PB1收到A的打洞包，根据对方的NAT类型，后续使用PA2与A连接&lt;/li>
&lt;li>打洞成功&lt;/li>
&lt;/ul>
&lt;h3 id="对称型和端口受限型">对称型和端口受限型&lt;/h3>
&lt;ul>
&lt;li>流程同上&lt;/li>
&lt;li>由于端口受限，B无法在PB1上接收PA2发来的打洞包&lt;/li>
&lt;li>打洞失败&lt;/li>
&lt;/ul>
&lt;h3 id="双方都是对称型">双方都是对称型&lt;/h3>
&lt;ul>
&lt;li>场景更严格，原理同上，无法打洞&lt;/li>
&lt;/ul>
&lt;p>判断网络是否能够打通，有一种简单的计算方法&lt;/p></description></item><item><title>RTOS实现原理</title><link>https://firebat.github.io/posts/rtos/</link><pubDate>Mon, 04 Dec 2023 00:00:00 -0800</pubDate><guid>https://firebat.github.io/posts/rtos/</guid><description>&lt;h1 id="目的">目的&lt;/h1>
&lt;p>为什么会有这篇文章？
首先是好奇。月亮为什么会有盈缺？苹果为什么会落下？烧开水的壶盖为什么会跳动？无线电为什么会传播？正是因为好奇，人类才从洞穴走向了宇宙深空。好奇心是人类的基本特征，是追求进步、推动创新的源动力。记得有一道经典的面试题：浏览器输入URL后会车发生了什么？同样，在我们生活之中有各种类似的问题，当用手机扫描共享单车完成支付后，锁是怎么打开的？当把燃气充值卡后插入表中，发生了什么？&lt;/p>
&lt;p>其次是有用。计算机归根结底是一门应用学科，当我们在准备掌握一门新技术时，总会想到一个问题：有什么用。掌握编程语言让我们知道如何编写逻辑，掌握数据结构有助于更好地组织逻辑，其中最重要且复杂的要数操作系统。每一位有想法的计算机专业学生，都把写一个编译器或操作系统作为自己的终极目标或专业能力试金石。比如Linus在1997年的硕士毕业论文，题目就是《Linux: A Portable Operating System》。但当我们真正深入操作系统时不免会遇到重重困难：要么是书厚、代码多、门槛高；又或是时代久远，各种硬件环境、工具链资料缺失，难以复现；又或者是从xv6或30天系列入手，学完后遇到另一个问题“有什么用”。而学习RTOS就很好的避开了上述问题，不仅代码量少上手容易，迅速理解操作系统的工作原理；又能紧跟时代，获取到最新的硬件和技术资料；而且还能和实际生活应用联系起来。比如北京在20年治理雾霾过程中的空气质量监测，疫情期间公共场合的人体温度红外识别；记得B站上看过一个纪录片，福岛核事故后续，几位退休人员组成的民间团体，拿着自制的辐射检测仪深入街道、学校、树林检测环境的危害程度，来标记安全的活动区域，令人印象深刻。&lt;/p>
&lt;h1 id="发展历程">发展历程&lt;/h1>
&lt;p>我们将从计算机发展史开始，快速理解各种词汇的含义，并进一步认识微控制器和RTOS在现代技术领域中的定位。&lt;/p>
&lt;ul>
&lt;li>1969年12月，CTC计算机终端公司是一家使用TTL制造8位处理器生产电传打印机的公司，位于德克萨斯州，由NASA前工程师Gus Roche和Phil Ray在1968年创立。在开发Datapoint 2200时，为了减少处理器尺寸和发热量，咨询Intel能否采用单芯片的方案。德州仪器的销售人员听说此事后，也争取到了这份订单。&lt;/li>
&lt;li>1971年6月，德州仪器率先公布TMX1795，第一款8位处理器，但由于空间浪费并未被采纳；而Intel的芯片直到年底才就绪，同样未被采纳；CTC采用开关电源解决了发热问题，并继续使用TTL制造处理器。&lt;/li>
&lt;li>1971年11月，Intel发布第一款4位单芯片处理器4004，又称MCS-4，主频108~740KHz，内部由四个集成电路（IC）组成，由Federico Faggin、Stan Mazor和Ted Hoff三位工程师设计，提供给日本公司Busicom用来生产电子计算器。通过让出6万美元的研发费用，Intel拥有了4004的所有权。&lt;/li>
&lt;li>1972年4月，Intel发布了8位处理器8008，又称MCS-8，频率0.5/0.8MHz，14位地址支持16KB内存、支持中断处理。由于当初CTC放弃该芯片时没有支付足够的研发费用，双方达成协议，Intel获得了芯片所有权以及CTC开发的指令集，并在两年后将其商业化，该指令集成为x86指令的基础。&lt;/li>
&lt;li>1974年3月，Motorola推出MC6800，以PDP-11的处理器为结构模板，时钟可达1~2MHz，16位地址可直接访问64KB内存。6月，惠普开发出基于6800的系统原型机；直到11月，M6800微机系统才投产。Motorola采用和8080同样的售价，高达360美元。由于工厂搬迁、裁员危机、以及公司对研发低成本处理器的消极态度，8月，研发人员Chuck Peddle和其他五名工程师离开后，加入了宾夕法尼亚州的MOS科技，该公司主要为德州仪器和雅达利做外包。&lt;/li>
&lt;li>1974年4月，Intel发布8080处理器，做为8008的扩展和增强，时钟频率达到2MHz，由于指令集的原因，实际处理速度不如6800，最初主要用于控制交通信号灯，但很快被用来生产计算机，并成为有史以来最成功的处理器之一。1975年1月，MITS采用8080生产出Altair 8800，成为世界上第一台微型计算机，拥有256字节RAM。在哈佛读书的Bill Gates和Paul Allen为其设计了BASIC编辑器。&lt;/li>
&lt;li>1974年12月，仙童（Fairchild）推出第一款单片机F8，包含一个8位CPU、64B RAM（其实是两片3850/3851)。&lt;/li>
&lt;li>1975年9月，MOS科技推出了6502，主频和6800一致，但拥有一条指令流水线，性能更好，售价仅25美元。同时为了帮助电子工程师制作电脑和设备，Peddle还研发了KIM-1开发板，拥有1KB内存。由于6502的出色表现，MOS科技被Commodore收购。由于价格低廉，性能出色，该处理器被广泛应用于家庭电脑、游戏机之中。&lt;/li>
&lt;li>1976年3月，Steve Wozniak和Steve Jos利用6502搭建出了Apple I的主板，并在4月1日成立Apple公司。&lt;/li>
&lt;li>1976年7月，Federico Faggin离开Intel成立了Zilog公司并发布Z80处理器，达到2.5MHz，与8080指令兼容。&lt;/li>
&lt;li>1976年9月，Intel推出8位单片机MCS-48系列，内部包含1KB ROM、64B RAM，用于制造电视遥控、键盘等。&lt;/li>
&lt;li>1977年10月，通用仪器（GI）公布了PIC1650单片机，包含512B ROM、32B RAM，用于扩展CP1600（GI和霍尼韦尔联合开发的16位处理器）的IO功能，后拆分成为Microchip公司。&lt;/li>
&lt;li>1978年6月，Intel推出第一款16位处理器 8086，主频4.43MHz，24位地址总线寻址范围达到1MB。&lt;/li>
&lt;li>1978年12月，Hermann Hauser和Chris Curry在英格兰剑桥创办了Camberidge Processor Unit Ltd.主营电子设备设计和制造业务。在1979年3月发明「Acorn System 1」，使用6502处理器，并将公司改名为Acorn。&lt;/li>
&lt;li>1979年6月，Intel推出8088，主频达到5~10MHz，并成功被IBM采用，作为个人电脑的处理器。&lt;/li>
&lt;li>1980年，Intel推出MCS-51单片机，内含4KB ROM，128B RAM，最初被用作IBM PC的键盘控制器。&lt;/li>
&lt;li>1981年12月，Acorn推出BBC Micro计算机，成为欧洲第一台畅销的个人计算机。并在之后开始设计一种类似高级6502架构的处理器。&lt;/li>
&lt;li>1982年，Intel推出16位单片机MCS-96系列，主频达到12MHz、8K ROM以及232B RAM，支持8级中断。&lt;/li>
&lt;li>1985年4月，Acorn公司团队研发出采用精简指令集的新处理器Acorn RISC Machine，又称ARM1，采用32位精简指令集，26位地址总线可寻址64M空间，但主频只有6MHz。&lt;/li>
&lt;li>1985年10月，Intel推出32位处理器80386，主频达到12.5-40MHz，32位地址总线可以寻址4G内存。&lt;/li>
&lt;li>1990年11月，为了更好地发展ARM，Acorn公司的12名员工接受了苹果和VLSI的投资，成立合资公司ARM，同时更改了产品策略：只负责设计，不再负责生产制造和出售，以降低研发成本和风险。&lt;/li>
&lt;li>1993年，ARM发布ARM6内核，作为ARM2和ARM3的改进版，授权给Cirrus Logic和德州仪器。同年苹果推出了的掌上电脑Newton，使用了ARM6的芯片。&lt;/li>
&lt;li>1997年，Nokia6110发布，基于ARM7TDMI内核处理器。&lt;/li>
&lt;li>2004年，ARM发布Cortex-M3内核，在ARM11后，放弃了ARMx的命名方式，并采用A、R、M系列，分别对应高性能、高实时性和微控制器场合。&lt;/li>
&lt;li>2007年，第一款iPhone发布，搭载Samsung生产的S5L8900，基于ARM11内核。&lt;/li>
&lt;li>2010年3月，任天堂在E3 2010发布了3DS，采用ARM11 MP双核和ARM9处理器。&lt;/li>
&lt;li>2017年3月，任天堂发布了Switch掌机，采用Nvidia Tegra X1处理器，基于Cortex-A57、Cortex-A53核心。&lt;/li>
&lt;li>2020年11月，苹果发布第一款基于ARM架构的自研处理器Apple M1，采用ARMv8-A指令集架构。&lt;/li>
&lt;li>2021年11月，富士通基于A64FX处理器打造的超级计算机“富岳”蝉联超算第一，采用ARMv8.2-A架构&lt;/li>
&lt;/ul>
&lt;p>早期单片机多用于外设接口控制器，服务于处理器系统， 随着芯片工艺不断改进，集成度和运算能力不断提升，微控制器也获得广泛的应用和发展。目前，比较常见的单片机有&lt;/p></description></item><item><title>RTOS系统移植</title><link>https://firebat.github.io/posts/rtos-port/</link><pubDate>Wed, 08 Feb 2023 00:00:00 +0800</pubDate><guid>https://firebat.github.io/posts/rtos-port/</guid><description>&lt;h1 id="硬件">硬件&lt;/h1>
&lt;p>开发板 STM32F103C8T6 核心板，也称STM32 Blue Pill
&lt;img src="images/stm32f103.jpg" alt="">&lt;/p>
&lt;p>下载器 STLink&lt;/p>
&lt;p>&lt;img src="images/stlink.jpg" alt="">&lt;/p>
&lt;h1 id="软件">软件&lt;/h1>
&lt;p>&lt;a href="https://www.st.com/en/development-tools/stm32cubeide.html">STMCubeIDE&lt;/a> 是意法半导体基于Eclipse构建的开发工具，可以快速生成项目框架。&lt;/p>
&lt;p>选择芯片为STM32F103
&lt;img src="images/cubeide_f103.jpg" alt="">&lt;/p>
&lt;p>配置端口、时钟和调试模式&lt;/p>
&lt;ul>
&lt;li>&lt;code>GPIO/PC13&lt;/code> 为&lt;code>GPIO_Output&lt;/code>模式&lt;/li>
&lt;li>&lt;code>RCC/High Speed Clock&lt;/code> 高速时钟源为&lt;code>Crystal/Ceramic Resonator&lt;/code> 晶振/ 外部陶瓷振荡器&lt;/li>
&lt;li>&lt;code>SYS/Debug&lt;/code> 调试模式为&lt;code>Serial Wire&lt;/code>
&lt;img src="images/cubeide_conf.jpg" alt="">&lt;/li>
&lt;/ul>
&lt;p>设置HCLK高速总线时钟为72MHz
&lt;img src="images/cubeide_clock.jpg" alt="">&lt;/p>
&lt;p>生成独立的头文件
&lt;img src="images/cubeide_gen.jpg" alt="">&lt;/p>
&lt;p>保存设置后，提示自动生成代码。只要在指定区域编写用户代码，后续修改ioc的配置可重新生成代码。这里通过HAL库函数修改GPIOC的状态，跟踪这些库函数可以看到，GPIOC、GPIOC_BASE等均是对应寄存器的地址定义。
&lt;img src="images/cubeide_edit.jpg" alt="">&lt;/p>
&lt;p>点击Run按钮IDE将自动构建并下载文件到芯片，Debug模式也可以在代码中设置断点调试。Memory Regions窗口会展示空间使用状况，由于使用HAL库，Flash的空间占用了增长到4.59KB。
&lt;img src="images/cubeide_run.jpg" alt="">&lt;/p>
&lt;h1 id="µcos-iiii移植">µC/OS IIII移植&lt;/h1>
&lt;p>开源、商业化收费，是Micrium公司开发的一款嵌入式实时操作系统，代码规范符合ANSI-C标准，简洁干净非常适合学习。最早出自于1992 年美国嵌入式系统专家Jean J.Labrosse 在《嵌入式系统编程》杂志的文章连载。1998年发布的第二代，通过严格的测试，2000年获得DO-178BA级认证，得到美国联邦航空管理局FAA的认证，可以用在飞行器上。2009年发行第三代，经过了全新的设计，具有高度可移植性，没有任务数目的限制。&lt;/p>
&lt;p>官网提供了系统移植例程，这里可以参考STM32F107的&lt;/p>
&lt;p>网盘链接：https://pan.baidu.com/s/14qwunKCyeArTFGCYIIizbw 提取码：hadl&lt;/p>
&lt;ul>
&lt;li>创建RTOS，将解压后的&lt;code>uC-CPU&lt;/code>, &lt;code>uC-LIB&lt;/code>, &lt;code>uCOS-III&lt;/code> 拷贝进去&lt;/li>
&lt;li>创建&lt;code>uC-Config&lt;/code>，将EvalBoards中uCOS-III、BSP下的文件拷贝进去
&lt;img src="images/uc_1.jpg" alt="">&lt;/li>
&lt;/ul>
&lt;p>添加RTOS到Source Location
&lt;img src="images/uc_2.jpg" alt="">&lt;/p>
&lt;p>IDE使用gcc编译器进行构建，所以&lt;code>uC-CPU&lt;/code>、&lt;code>uC-LIB&lt;/code>、&lt;code>uCOS-III&lt;/code>目录中&lt;code>ARM-Cortext-M3&lt;/code>只保留GNU（RealView对应Keil公司的MDK编译器）。其余的可直接删掉，或者右键&lt;code>Resource Configurations / Exclude from Build..&lt;/code>
&lt;img src="images/uc_3.jpg" alt="">&lt;/p>
&lt;p>将所有包含代码的目录添加到&lt;code>Include Paths&lt;/code>
&lt;img src="images/uc_4.jpg" alt="">&lt;/p>
&lt;p>清除&lt;code>bsp.h&lt;/code>仅保留&lt;code>cpu.h&lt;/code>的引用
&lt;img src="images/uc_5.jpg" alt="">&lt;/p>
&lt;p>清除&lt;code>bsp.c&lt;/code>的无效内容
&lt;img src="images/uc_6.jpg" alt="">&lt;/p>
&lt;p>使用&lt;code>Ctrl+B&lt;/code>进行尝试编译，此时剩下&lt;code>BSP_CPU_ClkFreq&lt;/code>报错。引用&lt;code>stm32f1xx_hal.h&lt;/code>后重写该方法，使用&lt;code>HAL_RCC_GetHCLKFreq&lt;/code>获取HCLK时钟频率
&lt;img src="images/uc_7.jpg" alt="">&lt;/p>
&lt;p>修改&lt;code>Core/Src/stm32f1xx_it.c&lt;/code>，激活OS的系统时钟。此处的&lt;code>HAL_IncTick&lt;/code>用于激活HAL库的时间函数，比如&lt;code>HAL_Delay&lt;/code>
&lt;img src="images/uc_8.jpg" alt="">&lt;/p>
&lt;p>修改&lt;code>uCOS-III/Ports/ARM-Cortex-M3/Generic/GNU/os_cpu_a.s&lt;/code>的38、133行，将所有&lt;code>OS_CPU_PendSVHandler&lt;/code>改名为&lt;code>PendSV_Handler&lt;/code>。本质是使用ucOS的PendSV替换掉默认的
&lt;img src="images/uc_9.jpg" alt="">&lt;/p>
&lt;p>注释掉&lt;code>stm32f1xx_it.c&lt;/code>中的&lt;code>PendSV_Handler&lt;/code>
&lt;img src="images/uc_10.jpg" alt="">&lt;/p>
&lt;p>使用uCOS提供的函数重写main方法
&lt;img src="images/uc_11.jpg" alt="">&lt;/p>
&lt;p>重新编译后下载，uCOS可以正常运行。&lt;/p>
&lt;h1 id="freertos">FreeRTOS&lt;/h1>
&lt;p>开源、免费，2003年由Richard Barry创建，是除Linux以外最受欢迎的嵌入式操作系统。2017年作者加入亚马逊担任首席工程师，FreeRTOS也由亚马逊管理，商业化版本为OpenRTOS。
&lt;img src="images/freertos.jpg" alt="">&lt;/p>
&lt;p>从https://github.com/FreeRTOS/FreeRTOS-Kernel 获取系统源码。将FreeRTOS下的文件、&lt;code>include&lt;/code>、&lt;code>portable&lt;/code>下的&lt;code>GCC/ARM_CM3&lt;/code>和&lt;code>MemMang&lt;/code>拷贝到新建的RTOS源码目录；MemMang下每个文件代表不同的内存管理方式，这里选用&lt;code>heap_2&lt;/code>方式。
将&lt;code>FreeRTOS\Demo\CORTEX_STM32F103_GCC_Rowley\FreeRTOSConfig.h&lt;/code>拷贝到&lt;code>include&lt;/code>目录。
&lt;img src="images/freertos_1.jpg" alt="">&lt;/p>
&lt;p>添加到构建路径中
&lt;img src="images/freertos_2.jpg" alt="">&lt;/p></description></item><item><title>Go简明教程</title><link>https://firebat.github.io/posts/simple-go/</link><pubDate>Mon, 22 Aug 2022 00:00:00 +0800</pubDate><guid>https://firebat.github.io/posts/simple-go/</guid><description>&lt;p>本教程为《&lt;a href="https://gopl-zh.github.io/">Go语言圣经&lt;/a>》内容简化，作为开发同学快速上手用。&lt;/p>
&lt;h1 id="语言基础">语言基础&lt;/h1>
&lt;ul>
&lt;li>没有异常、宏&lt;/li>
&lt;li>常量编译时计算&lt;/li>
&lt;li>包、变量 声明后必须使用，否则报错&lt;/li>
&lt;li>使用&lt;code>_&lt;/code>丢弃数据，防止编译报错（变量、包）&lt;/li>
&lt;li>包初始化默认执行&lt;code>init()&lt;/code>&lt;/li>
&lt;li>首字母大写可外部访问，否则仅内部访问&lt;/li>
&lt;li>&lt;code>switch&lt;/code>默认&lt;code>break&lt;/code>，相邻&lt;code>case&lt;/code>执行需加&lt;code>fallthrough&lt;/code> (用得少）&lt;/li>
&lt;/ul>
&lt;h1 id="关键字">关键字&lt;/h1>
&lt;p>25个，仅用于语法结构&lt;/p>
&lt;pre tabindex="0">&lt;code>break default func interface select
case defer go map struct
chan else goto package switch
const fallthrough if range type
continue for import return var
&lt;/code>&lt;/pre>&lt;h1 id="预定义名">预定义名&lt;/h1>
&lt;p>30多个，用于常量、类型、函数&lt;/p>
&lt;pre tabindex="0">&lt;code>内建常量 true false iota nil
内建类型 int int8 int16 int32 int64
 uint uint8 uint16 uint32 uint64 uintptr
 float32 float64 complex128 complex64
 bool byte rune string error
内建函数 make len cap new append copy close delete
 complex real(实部) imag(虚部)
 panic recover
&lt;/code>&lt;/pre>&lt;h1 id="包">包&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">包名&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#a6e22e">别名&lt;/span>] &lt;span style="color:#a6e22e">包名&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#a6e22e">包名&lt;/span> &lt;span style="color:#75715e">// 触发init() 如: 注册驱动&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="常量">常量&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">常量名&lt;/span> &lt;span style="color:#a6e22e">常量类型&lt;/span> = &lt;span style="color:#a6e22e">表达式&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">PI&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> = &lt;span style="color:#ae81ff">3.14159&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 批量定义&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="变量">变量&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">变量名&lt;/span> &lt;span style="color:#a6e22e">类型&lt;/span> = &lt;span style="color:#a6e22e">表达式&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;alice&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;alice&amp;#34;&lt;/span> &lt;span style="color:#75715e">// 类型自动识别&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;alice&amp;#34;&lt;/span> &lt;span style="color:#75715e">// 函数内简写&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 批量定义&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="数组切片哈希">数组切片哈希&lt;/h1>
&lt;ul>
&lt;li>数组，定长&lt;/li>
&lt;li>切片，变长，通过data、len、cap 定义一个数据空间&lt;/li>
&lt;li>哈希，无序&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">数组&lt;/span> [&lt;span style="color:#a6e22e">长度&lt;/span>]&lt;span style="color:#a6e22e">类型&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">array&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> [&lt;span style="color:#ae81ff">2&lt;/span>]&lt;span style="color:#66d9ef">int&lt;/span>{&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">2&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">array&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> [&lt;span style="color:#f92672">...&lt;/span>]&lt;span style="color:#66d9ef">int&lt;/span>{&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">2&lt;/span>,&lt;span style="color:#ae81ff">3&lt;/span>} &lt;span style="color:#75715e">// ... 自适应长度&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>len(&lt;span style="color:#a6e22e">array&lt;/span>) &lt;span style="color:#75715e">// 长度&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">array&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">切片&lt;/span> []&lt;span style="color:#a6e22e">类型&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">slice&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#a6e22e">T&lt;/span>, &lt;span style="color:#a6e22e">len&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">slice&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#a6e22e">T&lt;/span>, &lt;span style="color:#a6e22e">len&lt;/span>, &lt;span style="color:#a6e22e">cap&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">slice&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Red&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Green&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Blue&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>len(&lt;span style="color:#a6e22e">slice&lt;/span>) &lt;span style="color:#75715e">// 长度&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cap(&lt;span style="color:#a6e22e">slice&lt;/span>) &lt;span style="color:#75715e">// 容量&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>append(&lt;span style="color:#a6e22e">slice&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span>) &lt;span style="color:#75715e">// 自动扩容&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">slice&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">哈希&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#a6e22e">键类型&lt;/span>]&lt;span style="color:#a6e22e">值类型&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">map&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">int&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">map&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">int&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Red&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Green&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Blue&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>delete(&lt;span style="color:#66d9ef">map&lt;/span>, &lt;span style="color:#a6e22e">key&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span> { &lt;span style="color:#75715e">// 迭代遍历&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="定义类型">定义类型&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">类型名&lt;/span> &lt;span style="color:#a6e22e">底层类型&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Celsius&lt;/span> &lt;span style="color:#a6e22e">float6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Point&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">X&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Y&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Circle&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Point&lt;/span> &lt;span style="color:#75715e">// 匿名嵌入，类似继承&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Radius&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Node&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Value&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Next&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Node&lt;/span> &lt;span style="color:#75715e">// 同类型指针&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="make和new">make和new&lt;/h1>
&lt;ul>
&lt;li>make 初始化内置类型(仅&lt;code>slice/hash/channel&lt;/code>) ，返回引用&lt;/li>
&lt;li>new 根据类型分配内存，返回指针&lt;/li>
&lt;li>若分不清，可统一用 &lt;code>Type{}&lt;/code> 和 &lt;code>&amp;amp;Type{}&lt;/code> 方式&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> make(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">Type&lt;/span>, &lt;span style="color:#a6e22e">size&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#a6e22e">IntegerType&lt;/span>) &lt;span style="color:#a6e22e">Type&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> new(&lt;span style="color:#a6e22e">Type&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Type&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">默认空值&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">变量&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#a6e22e">取地址&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">指针&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#a6e22e">取变量&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="类型转换">类型转换&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 显示转换&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">目标变量&lt;/span> = &lt;span style="color:#a6e22e">目标类型&lt;/span>(&lt;span style="color:#a6e22e">源变量&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">s&lt;/span> = :int64(&lt;span style="color:#a6e22e">x&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 断言转换&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">目标变量&lt;/span> = &lt;span style="color:#a6e22e">源变量&lt;/span>.(&lt;span style="color:#a6e22e">目标类型&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span>.(&lt;span style="color:#a6e22e">T&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 识别转换&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#a6e22e">目标变量&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">源变量&lt;/span>.(&lt;span style="color:#66d9ef">type&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>: &lt;span style="color:#75715e">// nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>: &lt;span style="color:#75715e">// 数据类型&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">float64&lt;/span>: &lt;span style="color:#75715e">// 函数类型&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>: &lt;span style="color:#75715e">// 未知类型&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 强制转换&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">目标变量&lt;/span> = &lt;span style="color:#f92672">*&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">目标类型&lt;/span>)(&lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">源变量&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="函数">函数&lt;/h1>
&lt;ul>
&lt;li>一等公民，可闭包、可作为参数、返回值传递&lt;/li>
&lt;li>支持多返回值&lt;/li>
&lt;li>没有重载和默认值&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">函数名&lt;/span>(&lt;span style="color:#a6e22e">参数列表&lt;/span>) (&lt;span style="color:#a6e22e">返回列表&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">Upper&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#75715e">// 函数声明&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Upper&lt;/span> = &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) { &lt;span style="color:#75715e">// 函数赋值&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> () { &lt;span style="color:#75715e">// 立即执行匿名函数&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">sum&lt;/span>(&lt;span style="color:#a6e22e">vals&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#75715e">// 可变参数&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="error">Error&lt;/h1>
&lt;ul>
&lt;li>通常作为函数最后一个返回值&lt;/li>
&lt;li>与异常思路略有不同，异常默认返回，需处理则catch；Error默认继续，需处理则if&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">MustDoSomething&lt;/span>() (&lt;span style="color:#66d9ef">any&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Error happened&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#a6e22e">自定义错误&lt;/span> &lt;span style="color:#a6e22e">带编码&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">CodeError&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Code&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;code&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Message&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;message&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">CodeError&lt;/span>) &lt;span style="color:#a6e22e">Error&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span> { &lt;span style="color:#75715e">// 含有Error()方法的结构均可作为error使用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Message&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="context">Context&lt;/h1>
&lt;ul>
&lt;li>
&lt;ul>
&lt;li>调用链上下文管理，通常作为函数第一个参数&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#f92672">:=&lt;/span>&lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Background&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ctx&lt;/span> = &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">WithValue&lt;/span>(&lt;span style="color:#a6e22e">parent&lt;/span>, &lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span>) &lt;span style="color:#75715e">// 装饰器模式，内部是个链，性能不好&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">GetUser&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>)(&lt;span style="color:#a6e22e">UserInfo&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">ctx&lt;/span>.&lt;span style="color:#a6e22e">Value&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>) 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="panic">Panic&lt;/h1>
&lt;ul>
&lt;li>严重错误、无法恢复时使用，否则使用error机制 &lt;code>if err != nil&lt;/code>&lt;/li>
&lt;li>立即中断程序运行，执行对应的延时函数（defer机制）&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">MustCompile&lt;/span>(&lt;span style="color:#a6e22e">expr&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">re&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">Compile&lt;/span>(&lt;span style="color:#a6e22e">expr&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">re&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="defer">Defer&lt;/h1>
&lt;ul>
&lt;li>延时处理函数，函数执行后、内存释放前执行&lt;/li>
&lt;li>可以写多个，先入后出&lt;/li>
&lt;li>&lt;code>os.Exit&lt;/code>、&lt;code>log.Fatal&lt;/code> 会导致&lt;code>Defer&lt;/code>函数不执行，慎用&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">ReadFile&lt;/span>(&lt;span style="color:#a6e22e">filename&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">f&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Open&lt;/span>(&lt;span style="color:#a6e22e">filename&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">ReadAll&lt;/span>(&lt;span style="color:#a6e22e">f&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="recover">Recover&lt;/h1>
&lt;ul>
&lt;li>试图恢复panic&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> recover(); &lt;span style="color:#a6e22e">p&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>: &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#a6e22e">no&lt;/span> &lt;span style="color:#a6e22e">panic&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;x&amp;#34;&lt;/span>: &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#a6e22e">expected&lt;/span> &lt;span style="color:#a6e22e">panic&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>: &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#a6e22e">keep&lt;/span> &lt;span style="color:#a6e22e">going&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">p&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>panic(&lt;span style="color:#e6db74">&amp;#34;x&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="方法-method">方法 Method&lt;/h1>
&lt;ul>
&lt;li>绑定类型与函数，面向对象编程&lt;/li>
&lt;li>接收器通常用指针（引用传递），否则为副本（值传递）&lt;/li>
&lt;li>接收器变量名为类型首字母小写&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Point&lt;/span>) &lt;span style="color:#a6e22e">ScaleBy&lt;/span>(&lt;span style="color:#a6e22e">factor&lt;/span> &lt;span style="color:#66d9ef">float64&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">X&lt;/span> &lt;span style="color:#f92672">*=&lt;/span> &lt;span style="color:#a6e22e">factor&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">Y&lt;/span> &lt;span style="color:#f92672">*=&lt;/span> &lt;span style="color:#a6e22e">factor&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Point&lt;/span>{&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">2&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">ScaleBy&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="接口-interface">接口 Interface&lt;/h1>
&lt;ul>
&lt;li>以行为定类型，面向行为编程&lt;/li>
&lt;li>任意类型&lt;code>interface {}&lt;/code> 1.18版本后内建&lt;code>type any interface{}&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">io&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Reader&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Read&lt;/span>(&lt;span style="color:#a6e22e">p&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>)(&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Writer&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Write&lt;/span>(&lt;span style="color:#a6e22e">p&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>) (&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Closer&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Close&lt;/span>() &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">ReadWriter&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Reader&lt;/span> &lt;span style="color:#75715e">// 内嵌继承&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Writer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">ByteCounter&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ByteCounter&lt;/span>) &lt;span style="color:#a6e22e">Write&lt;/span>(&lt;span style="color:#a6e22e">p&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>)(&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>) { &lt;span style="color:#75715e">// 满足约定即可使用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="范型">范型&lt;/h1>
&lt;ul>
&lt;li>同类数据，逻辑复用&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">RestDTO&lt;/span> [&lt;span style="color:#a6e22e">T&lt;/span> &lt;span style="color:#66d9ef">any&lt;/span>] &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Code&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;code&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Message&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;message&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Data&lt;/span> &lt;span style="color:#a6e22e">T&lt;/span> &lt;span style="color:#e6db74">`json:&amp;#34;data&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">IdProvider&lt;/span> [&lt;span style="color:#a6e22e">T&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> | &lt;span style="color:#66d9ef">string&lt;/span>] &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Next&lt;/span>() &lt;span style="color:#a6e22e">T&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="并发">并发&lt;/h1>
&lt;ul>
&lt;li>&lt;code>goroutine&lt;/code> 协程并发执行，没有唯一标识（即无法实现ThreadLocal，需要Context机制）&lt;/li>
&lt;li>&lt;code>channel&lt;/code> 协程间通信&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">done&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, [&lt;span style="color:#a6e22e">缓冲大小&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() { &lt;span style="color:#75715e">// 并发执行&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Sleep&lt;/span>(&lt;span style="color:#ae81ff">3000&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">done&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#e6db74">&amp;#34;done&amp;#34;&lt;/span> &lt;span style="color:#75715e">// 发送信息&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">done&lt;/span> &lt;span style="color:#75715e">// 阻塞等待&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>close(&lt;span style="color:#a6e22e">done&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="多路复用">多路复用&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">done&lt;/span> = make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">cancelled&lt;/span>() &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">select&lt;/span> { &lt;span style="color:#75715e">// Select 多路复用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">done&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="懒处理">懒处理&lt;/h1>
&lt;ul>
&lt;li>仅执行一次，单例模式常用&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">once&lt;/span> &lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">Once&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">instance&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Type&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">GetInstance&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Type&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">once&lt;/span>.&lt;span style="color:#a6e22e">Do&lt;/span>(&lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">instance&lt;/span> = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Type&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">instance&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="互斥锁">互斥锁&lt;/h1>
&lt;pre tabindex="0">&lt;code>mu := sync.Mutex // 不可重入

func() {
 mu.Lock() // 临界区
 defer mu.Unlock()
 ...
}
&lt;/code>&lt;/pre>&lt;h1 id="读写锁">读写锁&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">mu&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">RWMutex&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">mu&lt;/span>.&lt;span style="color:#a6e22e">RLock&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">mu&lt;/span>.&lt;span style="color:#a6e22e">RUnlock&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="反射">反射&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#a6e22e">reflect&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">reflect&lt;/span>.&lt;span style="color:#a6e22e">TypeOf&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>) &lt;span style="color:#75715e">// 类型元信息&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">reflect&lt;/span>.&lt;span style="color:#a6e22e">ValueOf&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>) &lt;span style="color:#75715e">// 实际数值&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">tag&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Elem&lt;/span>().&lt;span style="color:#a6e22e">Field&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>).&lt;span style="color:#a6e22e">Tag&lt;/span> &lt;span style="color:#75715e">// 获取标签 如`json:name`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span>.&lt;span style="color:#a6e22e">Elem&lt;/span>().&lt;span style="color:#a6e22e">Field&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>).&lt;span style="color:#a6e22e">String&lt;/span>() &lt;span style="color:#75715e">// 获取字段值&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="测试">测试&lt;/h1>
&lt;ul>
&lt;li>与源文件同包，以&lt;code>_test.go&lt;/code>结尾&lt;/li>
&lt;li>功能测试以Test开头&lt;/li>
&lt;li>基准测试以Benchmark开头，默认进行功能测试，可通过&lt;code>-run=NONE&lt;/code>禁止&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ go test &lt;span style="color:#f92672">[&lt;/span>package&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -v 输出测试函数与时间
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -run&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> 测试名（正则匹配）
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -bench&lt;span style="color:#f92672">=&lt;/span>测试名（正则匹配）
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -benchmem 统计内存分配
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -coverprofile&lt;span style="color:#f92672">=&lt;/span>cover.out 覆盖率分析
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -cpuprofile&lt;span style="color:#f92672">=&lt;/span>cpu.out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -blockprofile&lt;span style="color:#f92672">=&lt;/span>block.out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -memprofile&lt;span style="color:#f92672">=&lt;/span>mem.out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ go tool cover -html&lt;span style="color:#f92672">=&lt;/span>覆盖率文件
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;testing&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 功能测试&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">TestName&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tests&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []&lt;span style="color:#66d9ef">struct&lt;/span> { &lt;span style="color:#75715e">// Case表&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">input&lt;/span> &lt;span style="color:#a6e22e">输入类型&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">want&lt;/span> &lt;span style="color:#a6e22e">结果类型&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#a6e22e">case1&lt;/span>, &lt;span style="color:#a6e22e">want1&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">test&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">tests&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">got&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">xxx&lt;/span>(&lt;span style="color:#a6e22e">input&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">got&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span>.&lt;span style="color:#a6e22e">want&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;.....&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 性能测试&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">BenchmarkName&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">B&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">:=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&amp;lt;&lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">N&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>异步任务队列</title><link>https://firebat.github.io/posts/async-task/</link><pubDate>Tue, 19 Apr 2022 00:00:00 +0800</pubDate><guid>https://firebat.github.io/posts/async-task/</guid><description>&lt;p>在我们介绍更复杂的调度管理问题之前，先了解一种基本的异步任务执行方案。&lt;/p>
&lt;h2 id="场景">场景&lt;/h2>
&lt;p>业务系统构建过程中，为了实现逻辑复用，面临大量的计算组装问题。如:&lt;/p>
&lt;ul>
&lt;li>数仓、复杂计算任务执行调度&lt;/li>
&lt;li>风控、营销类的策略管理&lt;/li>
&lt;li>数据核查规则管理&lt;/li>
&lt;li>多仿真验证&lt;/li>
&lt;/ul>
&lt;p>这些场景在执行时，按调用方式可以分为:&lt;/p>
&lt;ul>
&lt;li>同步组装，可以支持事务，包括节点、上下游、输入输出、常量变量定义等（择日细讲）&lt;/li>
&lt;li>异步组装，适用支持复杂流程管理，包括任务队列、优先级、回调事件等&lt;/li>
&lt;/ul>
&lt;h2 id="结构定义">结构定义&lt;/h2>
&lt;p>通过app区分，使服务可以为多个应用使用&lt;/p>
&lt;h3 id="任务队列">任务队列&lt;/h3>
&lt;ul>
&lt;li>app 应用标识&lt;/li>
&lt;li>queueId 队列标识&lt;/li>
&lt;li>queueType 队列类型, 并行=parallel, 串行=serial&lt;/li>
&lt;li>priority 优先级, 最小=0&lt;/li>
&lt;li>status 队列状态, 非激活=inactive, 激活中=active&lt;/li>
&lt;/ul>
&lt;h3 id="任务消息">任务消息&lt;/h3>
&lt;ul>
&lt;li>app 应用标识&lt;/li>
&lt;li>queueId 所属队列&lt;/li>
&lt;li>messageId 消息标识&lt;/li>
&lt;li>status 任务状态, 待执行=wait, 处理中=processing, 处理完成=completed&lt;/li>
&lt;li>taskClassName 任务类名&lt;/li>
&lt;li>parameter 任务参数&lt;/li>
&lt;li>stopQueueOnError 执行出错时，是否停止队列&lt;/li>
&lt;li>sendTime 客户发起时间&lt;/li>
&lt;li>receiveTime 服务接收时间&lt;/li>
&lt;li>acceptTime 分派时间&lt;/li>
&lt;li>startTime 开始执行时间&lt;/li>
&lt;li>nodeId 执行节点&lt;/li>
&lt;/ul>
&lt;h2 id="调度目标">调度目标&lt;/h2>
&lt;p>找到最优先需要执行的任务&lt;/p>
&lt;ul>
&lt;li>队列状态=激活中&lt;/li>
&lt;li>任务状态=待执行&lt;/li>
&lt;li>若为串型队列，只允许其中一个任务执行&lt;/li>
&lt;li>队列优先级最高&lt;/li>
&lt;li>创建时间最早&lt;/li>
&lt;/ul>
&lt;h3 id="单并行队列">单并行队列&lt;/h3>
&lt;p>每个app拥有一个并行队列(&lt;code>parallel_task_queue&lt;/code>)和多个串型队列(自定义)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">select&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t.message_id,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t.queue_id
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">from&lt;/span> task_info t
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">join&lt;/span> queue_info q &lt;span style="color:#66d9ef">on&lt;/span> q.queue_id &lt;span style="color:#f92672">=&lt;/span> t.queue_id &lt;span style="color:#66d9ef">and&lt;/span> q.status &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;active&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">where&lt;/span> t.status &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;wait&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">and&lt;/span> &lt;span style="color:#66d9ef">not&lt;/span> &lt;span style="color:#66d9ef">exists&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">select&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">from&lt;/span> task_info i
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">where&lt;/span> i.status &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;processing&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">and&lt;/span> i.queue_id &lt;span style="color:#f92672">=&lt;/span> t.queue_id
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">and&lt;/span> i.queue_id &lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;parallel_task_queue&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">order&lt;/span> &lt;span style="color:#66d9ef">by&lt;/span> q.priority &lt;span style="color:#66d9ef">desc&lt;/span>, t.receive_time, t.id;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="多并行队列">多并行队列&lt;/h3>
&lt;p>这里给出多并行队列的筛选方法，实际上单个并行队列足够满足大多数场景。&lt;/p></description></item><item><title>存储的发展</title><link>https://firebat.github.io/posts/storage/</link><pubDate>Wed, 07 Dec 2016 00:00:00 -0800</pubDate><guid>https://firebat.github.io/posts/storage/</guid><description>&lt;h2 id="文件系统">文件系统&lt;/h2>
&lt;h3 id="professor-eggerts-dumb-file-system-1974">Professor Eggert&amp;rsquo;s Dumb File System (~1974)&lt;/h3>
&lt;p>Dr.Eggert在本科期间为了“改进UNIX”，创建了他的第一个文件系统。
&lt;img src="./images/eggertfs.png" alt="img">&lt;/p>
&lt;ul>
&lt;li>每个扇区占用512字节&lt;/li>
&lt;li>第一个扇区分成16份，用于存放文件目录&lt;/li>
&lt;li>每个目录条目包含文件名、起始位置、文件大小&lt;/li>
&lt;/ul>
&lt;p>实际上确实有几种文件系统是参照这种方案实现的，比如&lt;a href="https://en.wikipedia.org/wiki/RT-11">RT-11&lt;/a>，广泛用于实时操作系统。&lt;/p>
&lt;h3 id="fat---file-allocation-table-1977">FAT - File Allocation Table (~1977)&lt;/h3>
&lt;p>为了减少碎片化问题，引入了FAT文件分配表
&lt;img src="./images/fat.png" alt="img">&lt;/p>
&lt;ul>
&lt;li>保留地址0块，用于引导扇区&lt;/li>
&lt;li>保留地址1块，用于超级块，包含文件系统信息、版本号、根目录位置等&lt;/li>
&lt;li>每个目录条目包含文件名、扩展名、第一个块地址、文件大小、标志位等信息，目录也是文件&lt;/li>
&lt;li>链表结构，顺序访问慢（可通过碎片整理优化）&lt;/li>
&lt;/ul>
&lt;h3 id="unix-file-system-1973">Unix File System (~1973)&lt;/h3>
&lt;p>&lt;img src="./images/ufs.png" alt="img">&lt;/p>
&lt;ul>
&lt;li>引入inode管理文件索引(index node)&lt;/li>
&lt;li>树形结构&lt;/li>
&lt;/ul>
&lt;h3 id="berkeley-fast-file-system-1980-41b">Berkeley Fast File System (~1980 4.1b)&lt;/h3>
&lt;p>&lt;img src="./images/bffs.png" alt="img">&lt;/p>
&lt;ul>
&lt;li>增加一个块位图，标记数据块是否空闲&lt;/li>
&lt;/ul>
&lt;h2 id="network-file-system">Network File System&lt;/h2>
&lt;p>网络文件系统, 一种使用于分散式文件系统的协定，由Sun公司开发，于1984年向外公布。允许远程主机通过网络挂载文件系统，并像它们是本地挂载的文件系统一样与它们进行交互。
&lt;img src="./images/NAS.gif" alt="img">&lt;/p>
&lt;h3 id="moosefs">MooseFS&lt;/h3>
&lt;p>具有容错性的网络分布式文件系统。它把数据分散存放在多个物理服务器上，而呈现给用户的则是一个统一的资源。&lt;/p>
&lt;ul>
&lt;li>Master server - a single machine managing the whole filesystem, storing metadata for every file.&lt;/li>
&lt;li>Chunk servers - any number of commodity servers storing files data and synchronizing it among themselves.&lt;/li>
&lt;li>Client - any number of machines using &lt;code>mfsmount&lt;/code> process to communicate with the managing server and with chunkservers.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="./images/mfs_write.png" alt="img">
&lt;img src="./images/mfs_read.png" alt="img">&lt;/p></description></item></channel></rss>