<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rtos on firebat</title><link>https://firebat.github.io/tags/rtos/</link><description>Recent content in Rtos on firebat</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Mon, 04 Dec 2023 00:00:00 +0800</lastBuildDate><atom:link href="https://firebat.github.io/tags/rtos/index.xml" rel="self" type="application/rss+xml"/><item><title>RTOS实现原理</title><link>https://firebat.github.io/posts/rtos/</link><pubDate>Mon, 04 Dec 2023 00:00:00 +0800</pubDate><guid>https://firebat.github.io/posts/rtos/</guid><description>&lt;h1 id="目的">目的&lt;/h1>
&lt;p>为什么会有这篇文章？
首先是好奇。月亮为什么会有盈缺？苹果为什么会落下？烧开水的壶盖为什么会跳动？无线电为什么会传播？正是因为好奇，人类才从洞穴走向了宇宙深空。好奇心是人类的基本特征，是追求进步、推动创新的源动力。记得有一道经典的面试题：浏览器输入URL后会车发生了什么？同样，在我们生活之中有各种类似的问题，当用手机扫描共享单车完成支付后，锁是怎么打开的？当把燃气充值卡后插入表中，发生了什么？&lt;/p>
&lt;p>其次是有用。计算机归根结底是一门应用学科，当我们在准备掌握一门新技术时，总会想到一个问题：有什么用。掌握编程语言让我们知道如何编写逻辑，掌握数据结构有助于更好地组织逻辑，其中最重要且复杂的要数操作系统。每一位有想法的计算机专业学生，都把写一个编译器或操作系统作为自己的终极目标或专业能力试金石。比如Linus在1997年的硕士毕业论文，题目就是《Linux: A Portable Operating System》。但当我们真正深入操作系统时不免会遇到重重困难：要么是书厚、代码多、门槛高；又或是时代久远，各种硬件环境、工具链资料缺失，难以复现；又或者是从xv6或30天系列入手，学完后遇到另一个问题“有什么用”。而学习RTOS就很好的避开了上述问题，不仅代码量少上手容易，迅速理解操作系统的工作原理；又能紧跟时代，获取到最新的硬件和技术资料；而且还能和实际生活应用联系起来。比如北京在20年治理雾霾过程中的空气质量监测，疫情期间公共场合的人体温度红外识别；记得B站上看过一个纪录片，福岛核事故后续，几位退休人员组成的民间团体，拿着自制的辐射检测仪深入街道、学校、树林检测环境的危害程度，来标记安全的活动区域，令人印象深刻。&lt;/p>
&lt;h1 id="发展历程">发展历程&lt;/h1>
&lt;p>我们将从计算机发展史开始，快速理解各种词汇的含义，并进一步认识微控制器和RTOS在现代技术领域中的定位。&lt;/p>
&lt;ul>
&lt;li>1969年12月，CTC计算机终端公司是一家使用TTL制造8位处理器生产电传打印机的公司，位于德克萨斯州，由NASA前工程师Gus Roche和Phil Ray在1968年创立。在开发Datapoint 2200时，为了减少处理器尺寸和发热量，咨询Intel能否采用单芯片的方案。德州仪器的销售人员听说此事后，也争取到了这份订单。&lt;/li>
&lt;li>1971年6月，德州仪器率先公布TMX1795，第一款8位处理器，但由于空间浪费并未被采纳；而Intel的芯片直到年底才就绪，同样未被采纳；CTC采用开关电源解决了发热问题，并继续使用TTL制造处理器。&lt;/li>
&lt;li>1971年11月，Intel发布第一款4位单芯片处理器4004，又称MCS-4，主频108~740KHz，内部由四个集成电路（IC）组成，由Federico Faggin、Stan Mazor和Ted Hoff三位工程师设计，提供给日本公司Busicom用来生产电子计算器。通过让出6万美元的研发费用，Intel拥有了4004的所有权。&lt;/li>
&lt;li>1972年4月，Intel发布了8位处理器8008，又称MCS-8，频率0.5/0.8MHz，14位地址支持16KB内存、支持中断处理。由于当初CTC放弃该芯片时没有支付足够的研发费用，双方达成协议，Intel获得了芯片所有权以及CTC开发的指令集，并在两年后将其商业化，该指令集成为x86指令的基础。&lt;/li>
&lt;li>1974年3月，Motorola推出MC6800，以PDP-11的处理器为结构模板，时钟可达1~2MHz，16位地址可直接访问64KB内存。6月，惠普开发出基于6800的系统原型机；直到11月，M6800微机系统才投产。Motorola采用和8080同样的售价，高达360美元。由于工厂搬迁、裁员危机、以及公司对研发低成本处理器的消极态度，8月，研发人员Chuck Peddle和其他五名工程师离开后，加入了宾夕法尼亚州的MOS科技，该公司主要为德州仪器和雅达利做外包。&lt;/li>
&lt;li>1974年4月，Intel发布8080处理器，做为8008的扩展和增强，时钟频率达到2MHz，由于指令集的原因，实际处理速度不如6800，最初主要用于控制交通信号灯，但很快被用来生产计算机，并成为有史以来最成功的处理器之一。1975年1月，MITS采用8080生产出Altair 8800，成为世界上第一台微型计算机，拥有256字节RAM。在哈佛读书的Bill Gates和Paul Allen为其设计了BASIC编辑器。&lt;/li>
&lt;li>1974年12月，仙童（Fairchild）推出第一款单片机F8，包含一个8位CPU、64B RAM（其实是两片3850/3851)。&lt;/li>
&lt;li>1975年9月，MOS科技推出了6502，主频和6800一致，但拥有一条指令流水线，性能更好，售价仅25美元。同时为了帮助电子工程师制作电脑和设备，Peddle还研发了KIM-1开发板，拥有1KB内存。由于6502的出色表现，MOS科技被Commodore收购。由于价格低廉，性能出色，该处理器被广泛应用于家庭电脑、游戏机之中。&lt;/li>
&lt;li>1976年3月，Steve Wozniak和Steve Jos利用6502搭建出了Apple I的主板，并在4月1日成立Apple公司。&lt;/li>
&lt;li>1976年7月，Federico Faggin离开Intel成立了Zilog公司并发布Z80处理器，达到2.5MHz，与8080指令兼容。&lt;/li>
&lt;li>1976年9月，Intel推出8位单片机MCS-48系列，内部包含1KB ROM、64B RAM，用于制造电视遥控、键盘等。&lt;/li>
&lt;li>1977年10月，通用仪器（GI）公布了PIC1650单片机，包含512B ROM、32B RAM，用于扩展CP1600（GI和霍尼韦尔联合开发的16位处理器）的IO功能，后拆分成为Microchip公司。&lt;/li>
&lt;li>1978年6月，Intel推出第一款16位处理器 8086，主频4.43MHz，24位地址总线寻址范围达到1MB。&lt;/li>
&lt;li>1978年12月，Hermann Hauser和Chris Curry在英格兰剑桥创办了Camberidge Processor Unit Ltd.主营电子设备设计和制造业务。在1979年3月发明「Acorn System 1」，使用6502处理器，并将公司改名为Acorn。&lt;/li>
&lt;li>1979年6月，Intel推出8088，主频达到5~10MHz，并成功被IBM采用，作为个人电脑的处理器。&lt;/li>
&lt;li>1980年，Intel推出MCS-51单片机，内含4KB ROM，128B RAM，最初被用作IBM PC的键盘控制器。&lt;/li>
&lt;li>1981年12月，Acorn推出BBC Micro计算机，成为欧洲第一台畅销的个人计算机。并在之后开始设计一种类似高级6502架构的处理器。&lt;/li>
&lt;li>1982年，Intel推出16位单片机MCS-96系列，主频达到12MHz、8K ROM以及232B RAM，支持8级中断。&lt;/li>
&lt;li>1985年4月，Acorn公司团队研发出采用精简指令集的新处理器Acorn RISC Machine，又称ARM1，采用32位精简指令集，26位地址总线可寻址64M空间，但主频只有6MHz。&lt;/li>
&lt;li>1985年10月，Intel推出32位处理器80386，主频达到12.5-40MHz，32位地址总线可以寻址4G内存。&lt;/li>
&lt;li>1990年11月，为了更好地发展ARM，Acorn公司的12名员工接受了苹果和VLSI的投资，成立合资公司ARM，同时更改了产品策略：只负责设计，不再负责生产制造和出售，以降低研发成本和风险。&lt;/li>
&lt;li>1993年，ARM发布ARM6内核，作为ARM2和ARM3的改进版，授权给Cirrus Logic和德州仪器。同年苹果推出了的掌上电脑Newton，使用了ARM6的芯片。&lt;/li>
&lt;li>1997年，Nokia6110发布，基于ARM7TDMI内核处理器。&lt;/li>
&lt;li>2004年，ARM发布Cortex-M3内核，在ARM11后，放弃了ARMx的命名方式，并采用A、R、M系列，分别对应高性能、高实时性和微控制器场合。&lt;/li>
&lt;li>2007年，第一款iPhone发布，搭载Samsung生产的S5L8900，基于ARM11内核。&lt;/li>
&lt;li>2010年3月，任天堂在E3 2010发布了3DS，采用ARM11 MP双核和ARM9处理器。&lt;/li>
&lt;li>2017年3月，任天堂发布了Switch掌机，采用Nvidia Tegra X1处理器，基于Cortex-A57、Cortex-A53核心。&lt;/li>
&lt;li>2020年11月，苹果发布第一款基于ARM架构的自研处理器Apple M1，采用ARMv8-A指令集架构。&lt;/li>
&lt;li>2021年11月，富士通基于A64FX处理器打造的超级计算机“富岳”蝉联超算第一，采用ARMv8.2-A架构&lt;/li>
&lt;/ul>
&lt;p>早期单片机多用于外设接口控制器，服务于处理器系统， 随着芯片工艺不断改进，集成度和运算能力不断提升，微控制器也获得广泛的应用和发展。目前，比较常见的单片机有&lt;/p></description></item><item><title>RTOS系统移植</title><link>https://firebat.github.io/posts/rtos-port/</link><pubDate>Wed, 08 Feb 2023 00:00:00 +0800</pubDate><guid>https://firebat.github.io/posts/rtos-port/</guid><description>&lt;h1 id="硬件">硬件&lt;/h1>
&lt;p>开发板 STM32F103C8T6 核心板，也称STM32 Blue Pill
&lt;img src="images/stm32f103.jpg" alt="">&lt;/p>
&lt;p>下载器 STLink&lt;/p>
&lt;p>&lt;img src="images/stlink.jpg" alt="">&lt;/p>
&lt;h1 id="软件">软件&lt;/h1>
&lt;p>&lt;a href="https://www.st.com/en/development-tools/stm32cubeide.html">STMCubeIDE&lt;/a> 是意法半导体基于Eclipse构建的开发工具，可以快速生成项目框架。&lt;/p>
&lt;p>选择芯片为STM32F103
&lt;img src="images/cubeide_f103.jpg" alt="">&lt;/p>
&lt;p>配置端口、时钟和调试模式&lt;/p>
&lt;ul>
&lt;li>&lt;code>GPIO/PC13&lt;/code> 为&lt;code>GPIO_Output&lt;/code>模式&lt;/li>
&lt;li>&lt;code>RCC/High Speed Clock&lt;/code> 高速时钟源为&lt;code>Crystal/Ceramic Resonator&lt;/code> 晶振/ 外部陶瓷振荡器&lt;/li>
&lt;li>&lt;code>SYS/Debug&lt;/code> 调试模式为&lt;code>Serial Wire&lt;/code>
&lt;img src="images/cubeide_conf.jpg" alt="">&lt;/li>
&lt;/ul>
&lt;p>设置HCLK高速总线时钟为72MHz
&lt;img src="images/cubeide_clock.jpg" alt="">&lt;/p>
&lt;p>生成独立的头文件
&lt;img src="images/cubeide_gen.jpg" alt="">&lt;/p>
&lt;p>保存设置后，提示自动生成代码。只要在指定区域编写用户代码，后续修改ioc的配置可重新生成代码。这里通过HAL库函数修改GPIOC的状态，跟踪这些库函数可以看到，GPIOC、GPIOC_BASE等均是对应寄存器的地址定义。
&lt;img src="images/cubeide_edit.jpg" alt="">&lt;/p>
&lt;p>点击Run按钮IDE将自动构建并下载文件到芯片，Debug模式也可以在代码中设置断点调试。Memory Regions窗口会展示空间使用状况，由于使用HAL库，Flash的空间占用了增长到4.59KB。
&lt;img src="images/cubeide_run.jpg" alt="">&lt;/p>
&lt;h1 id="µcos-iiii移植">µC/OS IIII移植&lt;/h1>
&lt;p>开源、商业化收费，是Micrium公司开发的一款嵌入式实时操作系统，代码规范符合ANSI-C标准，简洁干净非常适合学习。最早出自于1992 年美国嵌入式系统专家Jean J.Labrosse 在《嵌入式系统编程》杂志的文章连载。1998年发布的第二代，通过严格的测试，2000年获得DO-178BA级认证，得到美国联邦航空管理局FAA的认证，可以用在飞行器上。2009年发行第三代，经过了全新的设计，具有高度可移植性，没有任务数目的限制。&lt;/p>
&lt;p>官网提供了系统移植例程，这里可以参考STM32F107的&lt;/p>
&lt;p>网盘链接：https://pan.baidu.com/s/14qwunKCyeArTFGCYIIizbw 提取码：hadl&lt;/p>
&lt;ul>
&lt;li>创建RTOS，将解压后的&lt;code>uC-CPU&lt;/code>, &lt;code>uC-LIB&lt;/code>, &lt;code>uCOS-III&lt;/code> 拷贝进去&lt;/li>
&lt;li>创建&lt;code>uC-Config&lt;/code>，将EvalBoards中uCOS-III、BSP下的文件拷贝进去
&lt;img src="images/uc_1.jpg" alt="">&lt;/li>
&lt;/ul>
&lt;p>添加RTOS到Source Location
&lt;img src="images/uc_2.jpg" alt="">&lt;/p>
&lt;p>IDE使用gcc编译器进行构建，所以&lt;code>uC-CPU&lt;/code>、&lt;code>uC-LIB&lt;/code>、&lt;code>uCOS-III&lt;/code>目录中&lt;code>ARM-Cortext-M3&lt;/code>只保留GNU（RealView对应Keil公司的MDK编译器）。其余的可直接删掉，或者右键&lt;code>Resource Configurations / Exclude from Build..&lt;/code>
&lt;img src="images/uc_3.jpg" alt="">&lt;/p>
&lt;p>将所有包含代码的目录添加到&lt;code>Include Paths&lt;/code>
&lt;img src="images/uc_4.jpg" alt="">&lt;/p>
&lt;p>清除&lt;code>bsp.h&lt;/code>仅保留&lt;code>cpu.h&lt;/code>的引用
&lt;img src="images/uc_5.jpg" alt="">&lt;/p>
&lt;p>清除&lt;code>bsp.c&lt;/code>的无效内容
&lt;img src="images/uc_6.jpg" alt="">&lt;/p>
&lt;p>使用&lt;code>Ctrl+B&lt;/code>进行尝试编译，此时剩下&lt;code>BSP_CPU_ClkFreq&lt;/code>报错。引用&lt;code>stm32f1xx_hal.h&lt;/code>后重写该方法，使用&lt;code>HAL_RCC_GetHCLKFreq&lt;/code>获取HCLK时钟频率
&lt;img src="images/uc_7.jpg" alt="">&lt;/p>
&lt;p>修改&lt;code>Core/Src/stm32f1xx_it.c&lt;/code>，激活OS的系统时钟。此处的&lt;code>HAL_IncTick&lt;/code>用于激活HAL库的时间函数，比如&lt;code>HAL_Delay&lt;/code>
&lt;img src="images/uc_8.jpg" alt="">&lt;/p>
&lt;p>修改&lt;code>uCOS-III/Ports/ARM-Cortex-M3/Generic/GNU/os_cpu_a.s&lt;/code>的38、133行，将所有&lt;code>OS_CPU_PendSVHandler&lt;/code>改名为&lt;code>PendSV_Handler&lt;/code>。本质是使用ucOS的PendSV替换掉默认的
&lt;img src="images/uc_9.jpg" alt="">&lt;/p>
&lt;p>注释掉&lt;code>stm32f1xx_it.c&lt;/code>中的&lt;code>PendSV_Handler&lt;/code>
&lt;img src="images/uc_10.jpg" alt="">&lt;/p>
&lt;p>使用uCOS提供的函数重写main方法
&lt;img src="images/uc_11.jpg" alt="">&lt;/p>
&lt;p>重新编译后下载，uCOS可以正常运行。&lt;/p>
&lt;h1 id="freertos">FreeRTOS&lt;/h1>
&lt;p>开源、免费，2003年由Richard Barry创建，是除Linux以外最受欢迎的嵌入式操作系统。2017年作者加入亚马逊担任首席工程师，FreeRTOS也由亚马逊管理，商业化版本为OpenRTOS。
&lt;img src="images/freertos.jpg" alt="">&lt;/p>
&lt;p>从https://github.com/FreeRTOS/FreeRTOS-Kernel 获取系统源码。将FreeRTOS下的文件、&lt;code>include&lt;/code>、&lt;code>portable&lt;/code>下的&lt;code>GCC/ARM_CM3&lt;/code>和&lt;code>MemMang&lt;/code>拷贝到新建的RTOS源码目录；MemMang下每个文件代表不同的内存管理方式，这里选用&lt;code>heap_2&lt;/code>方式。
将&lt;code>FreeRTOS\Demo\CORTEX_STM32F103_GCC_Rowley\FreeRTOSConfig.h&lt;/code>拷贝到&lt;code>include&lt;/code>目录。
&lt;img src="images/freertos_1.jpg" alt="">&lt;/p>
&lt;p>添加到构建路径中
&lt;img src="images/freertos_2.jpg" alt="">&lt;/p></description></item></channel></rss>